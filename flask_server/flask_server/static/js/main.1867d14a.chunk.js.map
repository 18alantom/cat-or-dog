{"version":3,"sources":["App.js","index.js"],"names":["App","props","state","showCam","vidCap","hasSelected","uploadChangeHandler","bind","cameraClickHandler","captureClickHandler","verdictClickHandler","dontShowCam","videoRef","React","createRef","captureRef","this","setState","prevState","currState","getVideoTracks","forEach","track","stop","constraints","video","facingMode","aspectRatio","navigator","mediaDevices","getUserMedia","console","error","e","files","target","length","fr","FileReader","onload","_e","image","Image","imageWidth","width","imageHeight","height","size","sx","Math","max","sy","current","getContext","drawImage","src","result","readAsDataURL","log","canvas","dataURI","toDataURL","request","Request","method","body","fetch","then","response","text","window","innerWidth","innerHeight","marginBottom","shouldShowVideo","shouldShowCanvas","srcObject","titleStyle","marginTop","videoStyle","canvasStyle","className","style","ref","autoPlay","id","onClick","type","accept","display","onChange","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"js/main.1867d14a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showCam: false,\n      vidCap: null,\n      hasSelected: false,\n    };\n    this.uploadChangeHandler = this.uploadChangeHandler.bind(this);\n    this.cameraClickHandler = this.cameraClickHandler.bind(this);\n    this.captureClickHandler = this.captureClickHandler.bind(this);\n    this.verdictClickHandler = this.verdictClickHandler.bind(this);\n    this.dontShowCam = this.dontShowCam.bind(this);\n    this.videoRef = React.createRef();\n    this.captureRef = React.createRef();\n  }\n\n  // Release camera.\n  dontShowCam() {\n    let { vidCap } = this.state;\n    this.setState((prevState) => {\n      const currState = !prevState.showCam;\n      vidCap.getVideoTracks().forEach((track) => track.stop());\n      return {\n        showCam: currState,\n        vidCap: null,\n      };\n    });\n  }\n\n  // Activate or deactivate the camera, attach video stream to video element.\n  async cameraClickHandler() {\n    let { vidCap } = this.state;\n    if (vidCap != null) {\n      this.dontShowCam();\n    } else {\n      try {\n        const constraints = { video: { facingMode: \"environment\", aspectRatio: 1 } };\n        vidCap = await navigator.mediaDevices.getUserMedia(constraints);\n        this.setState((prevState) => ({\n          vidCap: vidCap,\n          showCam: !prevState.showCam,\n        }));\n      } catch (err) {\n        console.error(err);\n      }\n    }\n  }\n\n  // Grab file from user directory\n  async uploadChangeHandler(e) {\n    const { files } = e.target;\n    if (files.length > 0) {\n      const fr = new FileReader();\n      fr.onload = (_e) => {\n        const image = new Image();\n        image.onload = (_e) => {\n          const { width: imageWidth, height: imageHeight } = image;\n          // Center crop the image\n          const size = imageHeight < imageWidth ? imageHeight : imageWidth;\n          const sx = Math.max((imageWidth - imageHeight) / 2, 0);\n          const sy = Math.max((imageHeight - imageWidth) / 2, 0);\n\n          const { width, height } = this.captureRef.current;\n          this.captureRef.current.getContext(\"2d\").drawImage(image, sx, sy, size, size, 0, 0, width, height);\n          this.setState({ hasSelected: true });\n        };\n        image.src = fr.result;\n      };\n      fr.readAsDataURL(files[0]);\n    }\n  }\n\n  // Capture image onto canvas when capture is clicked.\n  captureClickHandler(e) {\n    console.log(\"...klachic\");\n    const { width, height } = this.captureRef.current;\n    this.captureRef.current.getContext(\"2d\").drawImage(this.videoRef.current, 0, 0, width, height);\n    this.setState({ hasSelected: true });\n  }\n\n  async verdictClickHandler() {\n    const { vidCap } = this.state;\n    if (vidCap != null) {\n      this.dontShowCam();\n    }\n    const { current: canvas } = this.captureRef;\n    const dataURI = canvas.toDataURL(\"image/jpeg\", 1);\n    const request = new Request(\"/\", { method: \"POST\", body: dataURI });\n    const response = await fetch(request).then((response) => response.text());\n    console.log(response);\n  }\n\n  render() {\n    const { showCam, vidCap, hasSelected } = this.state;\n    const { innerWidth, innerHeight } = window;\n\n    const size = innerWidth > innerHeight ? \"50vh\" : \"90vw\";\n    const marginBottom = showCam ? \"24px\" : \"0px\";\n\n    const shouldShowVideo = showCam ? size : \"0\";\n    const shouldShowCanvas = showCam ? `calc(${size}/3)` : hasSelected ? size : \"0\";\n\n    if (vidCap != null && showCam) {\n      this.videoRef.current.srcObject = vidCap;\n    }\n\n    const titleStyle = { marginTop: showCam ? \"0\" : \"-15vh\" };\n    const videoStyle = { height: shouldShowVideo, width: shouldShowVideo, marginBottom };\n    const canvasStyle = { marginBottom: hasSelected ? \"24px\" : marginBottom, height: shouldShowCanvas, width: shouldShowCanvas };\n    return (\n      <div className=\"App\">\n        <h1 className=\"App-title\" style={titleStyle}>\n          <span className=\"App-title-hp\">Cat</span> <span className=\"App-title-or\">or</span> <span className=\"App-title-hp\">Dog</span>\n        </h1>\n        <video ref={this.videoRef} style={videoStyle} className=\"Video\" autoPlay></video>\n        <canvas ref={this.captureRef} style={canvasStyle} className=\"Canvas\" width=\"224\" height=\"224\"></canvas>\n        <div className=\"Button-container\">\n          {hasSelected && (\n            <button className=\"Button\" id=\"Button-click\" onClick={this.verdictClickHandler}>\n              Verdict\n            </button>\n          )}\n          {showCam ? (\n            <button className=\"Button\" id=\"Button-click\" onClick={this.captureClickHandler}>\n              Capture\n            </button>\n          ) : (\n            <label className=\"Button\" id=\"Button-upload\">\n              <input type=\"file\" accept=\"image/*\" style={{ display: \"none\" }} onChange={this.uploadChangeHandler} />\n              Select\n            </label>\n          )}\n          <button className=\"Button\" id=\"Button-click\" onClick={this.cameraClickHandler}>\n            {showCam ? \"Stop\" : \"Camera\"}\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}